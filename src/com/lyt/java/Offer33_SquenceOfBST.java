package com.lyt.java;

//题目　
//	输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则返回true，
//否则返回false。假设输入的数组的任意两个数字都互不相同。
//思路
//	二叉树后序遍历数组的最后一个数为根结点，剩余数字中，小于根结点的数字（即左子树部分）
//都排在前面，大于根结点的数字（即右子树部分）都排在后面。根据遍历数组的这个特性，可以
//编写出一个递归函数，用于实现题目所要求的判断功能。
public class Offer33_SquenceOfBST {
	/**
	 * 后序数组验证：
	 * 	1.判断左子树 
	 * 	2.判断右子树 
	 * 	3.递归地判断左右子树
	 */
	public boolean verifySquenceOfBST(int[] sequence) {
		if (sequence == null || sequence.length <= 0)
			throw new RuntimeException("输入不合法");
		return verifyCore(sequence, 0, sequence.length - 1);
	}
	
	private boolean verifyCore(int[] sequence, int start, int end) {
		if (start >= end)
			return true;
		int mid = start;
		while (sequence[mid] < sequence[end])
			mid++;
		for (int i = mid; i < end; i++) {
			if (sequence[i] < sequence[end])
				return false;
		}
		return verifyCore(sequence, start, mid - 1) && verifyCore(sequence, mid, end - 1);
	}
	
//	前序数组验证
//	private boolean verifyCore(int[] sequence, int start, int end) {
//		if (start + 1 >= end)
//			return true;
//		int mid = start + 1;
//		while (sequence[mid] < sequence[start])
//			mid++;
//		for (int i = mid; i <= end; i++) {
//			if (sequence[i] < sequence[start])
//				return false;
//		}
//		return verifyCore(sequence, start + 1, mid - 1) && verifyCore(sequence, mid, end);
//	}

	public static void main(String[] args) {
		Offer33_SquenceOfBST demo = new Offer33_SquenceOfBST();
		boolean bst = demo.verifySquenceOfBST(new int[] {  5, 7, 6, 9, 11, 10, 8 });
//		boolean bst1 = demo.verifySquenceOfBST(new int[] {  8,5, 7, 6, 9, 11, 10 });
		System.out.println("后序二叉树验证：" + bst);
//		System.out.println("前序二叉树验证：" + bst1);
	}
}
